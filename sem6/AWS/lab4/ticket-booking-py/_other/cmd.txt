cd booking-service
docker build -t booking-service:latest .
docker images | grep booking-service
docker run -d --name booking-service --env-file ./.env -p 8000:8000 booking-service:latest

cd ticket-booking-py
docker-compose up -d
docker ps
docker logs -f booking-service
docker-compose down

//tym razem bez leaku hasla :P
terraform plan -var="master_password=yourpassword"
terraform apply -auto-approve -var="master_password=yourpassword" 
terraform output rabbitmq_endpoint
terraform destroy -auto-approve -var="master_password=yourpassword"

//rebuild docker images
docker-compose build --no-cache
docker-compose push



---------------------------------------------------------------------------
old docker compose:
version: "3.8"

networks:
  app-net:
    driver: bridge
    
services:
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks: 
      - app-net
  booking:
    build: ./booking-service
    container_name: booking
    env_file: ./booking-service/.env
    depends_on: 
      - rabbitmq
    networks:
      - app-net
    ports: ["8000:8000"]
  availability:
    build: ./availability-service
    container_name: availability
    env_file: ./availability-service/.env
    depends_on: 
      - rabbitmq
    networks:
      - app-net
    ports: ["8001:8001"]
  payment:
    build: ./payment-service
    container_name: payment
    env_file: ./payment-service/.env
    depends_on:
      - rabbitmq
    networks:
      - app-net
    ports: ["8002:8002"]
  ticketing:
    build: ./ticketing-service
    container_name: ticketing
    env_file: ./ticketing-service/.env
    depends_on:
      - rabbitmq
    networks:
      - app-net
    ports: ["8003:8003"]
  notification:
    build: ./notification-service
    container_name: notification
    env_file: ./notification-service/.env
    depends_on:
      - rabbitmq
    networks:
      - app-net
    ports: ["8004:8004"]
